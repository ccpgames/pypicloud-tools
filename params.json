{"name":"Pypicloud-tools","tagline":"Tools to bypass a PyPICloud installation and communicate directly with S3","body":"# pypicloud-tools\r\n\r\n[![Build Status](https://travis-ci.org/ccpgames/pypicloud-tools.png?branch=master)](https://travis-ci.org/ccpgames/pypicloud-tools)\r\n[![Coverage Status](https://coveralls.io/repos/ccpgames/pypicloud-tools/badge.svg?branch=master)](https://coveralls.io/r/ccpgames/pypicloud-tools?branch=master)\r\n[![Version](https://img.shields.io/pypi/v/pypicloud-tools.svg)](https://pypi.python.org/pypi/pypicloud-tools/)\r\n[![Download format](https://img.shields.io/badge/format-wheel-green.svg?)](https://pypi.python.org/pypi/pypicloud-tools/)\r\n[![Downloads this month](https://img.shields.io/pypi/dm/pypicloud-tools.svg)](https://pypi.python.org/pypi/pypicloud-tools/)\r\n[![Development Status](https://img.shields.io/badge/status-beta-orange.svg)](https://pypi.python.org/pypi/pypicloud-tools/)\r\n[![License](https://img.shields.io/github/license/ccpgames/pypicloud-tools.svg)](https://pypi.python.org/pypi/pypicloud-tools/)\r\n\r\nTools to bypass a PyPICloud installation and communicate directly with S3\r\n\r\n\r\n## Utilities\r\n\r\n### Upload\r\n\r\nUploads file(s) to the PyPICloud S3 bucket directly and performs an admin API call to rebuild the PyPICloud index after.\r\n\r\nExample:\r\n\r\n```bash\r\n$ upload dist/*\r\nUploading example_project/example-project-0.0.1.tar.gz .....1 done!\r\nUploading example_project/example_project-0.0.1-py2-none-any.whl .....1 done!\r\nUploading example_project/example_project-0.0.1-py2.7.egg ......1 done!\r\nPyPICloud server at http://your.pypicloud.server/pypi updated\r\n```\r\n\r\nThe numbers displayed are the amount of 50MB chunks you've sent to S3 as they send. It's fine if the file names use altering hypens/underscores per release type like you see above, they only need to match the initial part of the key before the `/` to be considered the same package.\r\n\r\n### Download\r\n\r\nDownloads the latest or a specific version directly from S3. Does not talk to PyPICloud and does not install the downloaded package. You can use pip to do either/both of those things.\r\n\r\nAlso possible with the download command is the `--url` flag to only print a download URL (usable for 5 minutes).\r\n\r\nBy default, if there are multiple releases of the same package+release, download will prefer wheels, then eggs, then source distributions. You can override that behavior with the `--egg` and `--src` flags.\r\n\r\nExamples:\r\n\r\n```bash\r\n$ download example_project=0.0.1\r\nexample_project-0.0.1-py2-none-any.whl\r\n```\r\n\r\n```bash\r\n$ download example_project --egg\r\nexample_project-0.0.1-py2.7.egg\r\n```\r\n\r\nPipes and redirects work like you'd expect: \r\n\r\n```bash\r\n$ download example_project --src | tar -xzf -\r\n```\r\n\r\n### List\r\n\r\nLists a package's releases, or releases of a package at a specific version. Again, talks straight to S3 and bypasses the PyPICloud installation.\r\n\r\nExample:\r\n\r\n```bash\r\n$ list example_project\r\nexample-project-0.0.1.tar.gz\r\nexample_project-0.0.1-py2.7.egg\r\nexample_project-0.0.1-py2-none-any.whl\r\n```\r\n\r\nListing multiple packages or packages with a version specifier is also supported.\r\n\r\nWhen called without any arguments, `list` will display all known packages.\r\n\r\n\r\n## Installation\r\n\r\n### Simple\r\n\r\n```bash\r\n$ pip install pypicloud-tools\r\n```\r\n\r\n### From source\r\n\r\n```bash\r\n$ git clone https://github.com/ccpgames/pypicloud-tools.git\r\n$ cd pypicloud-tools\r\n$ python setup.py install\r\n```\r\n\r\n\r\n## Configuration\r\n\r\nConfiguration for pypicloud-tools piggybacks on your `~/.pypirc` file. You can specify an alternate config file with the `--config` flag, but it must be in the same syntax. That syntax is:\r\n\r\n```conf\r\n[pypicloud]\r\n    repository:http://your.pypicloud.server/pypi\r\n    username:admin\r\n    password:hunter7\r\n    bucket:your_bucket\r\n    access:some_key\r\n    secret:other_key\r\n    acl:optional_acl\r\n```\r\n\r\nThe key **must** be `pypicloud`, it is the only key pypicloud-tools will look at. The username/password combination should have admin credentials on the PyPICloud installation as it needs to call `/admin/rebuild` after a succesful upload.\r\n\r\n\r\n# Copyright and License\r\n\r\npypicloud-tools was written by Adam Talsma\r\n\r\nCopyright (c) 2015 CCP hf.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}